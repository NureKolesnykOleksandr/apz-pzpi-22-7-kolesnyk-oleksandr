Міністерство освіти і науки України
Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»




Дисципліна «Архітектура програмного забезпечення» 
Лабораторна робота №3





Виконав:
ст. гр. ПЗПІ-22-7
Колесник О.А	Прийняв:
 ст. викл.
Сокорчук І.П



Харків – 2025 
1 ІСТОРІЯ ЗМІН

№	Дата 	Версія	Опис змін	Автор
1	15.05.25	0.1	Було створено розділ «Завдання».	Колесник Олександр
2	15.05.25	0.1	Було створено розділ «Опис виконаної роботи».	Колесник Олександр
3	15.05.25	0.1	Було створено розділ «Висновки з роботи»	Колесник Олександр
4	16.05.25	0.2	Було створено розділ «Додаток А»	Колесник Олександр
5	16.05.25	0.2	Було створено розділ «Додаток Б»	Колесник Олександр
6	17.05.25	0.3	Було створено розділ «Додаток В»	Колесник Олександр

2 ЗАВДАННЯ
Мета завдання – створити сучасний, ефективний та зручний у використанні клієнтський інтерфейс програмної системи, який забезпечить користувачам інтуїтивно зрозумілий спосіб взаємодії з системою. Головне завдання полягає у розробці адаптивного та динамічного веб-інтерфейсу, що стабільно інтегрується з серверною частиною через REST API, коректно обробляє та відображає дані, реалізує всю необхідну бізнес-логіку на стороні клієнта, а також відповідає сучасним вимогам до продуктивності, безпеки та юзабілітету. Для досягнення цієї мети передбачається використання сучасних фреймворків та бібліотек, реалізація адаптивного дизайну, налаштування надійного зв'язку з API, проведення комплексного тестування та документація всіх етапів розробки, що в результаті має забезпечити створення цілісного, стабільного та зручного для користувача інтерфейсу, повністю інтегрованого з back-end частиною системи.
3 ОПИС ВИКОНАНОЇ РОБОТИ
Програмне забезпечення клієнтської (front-end) частини розроблено на мові програмування C# з використанням фреймворку Blazor, що дозволяє створювати інтерактивні веб-інтерфейси з використанням .NET. Для побудови користувацького інтерфейсу застосовано компоненти Blazor, які надають сучасний дизайн. Автентифікація користувачів реалізована через 	Cookie.
Клієнтська частина взаємодіє із сервером через REST API, отримуючи дані про пристрої, їх показники, рекомендації для користувачів, прогнози погоди та іншу системну інформацію. Для адміністраторів передбачено функціонал управління користувачами.
Стан додатка керується через вбудовані механізми Blazor, що забезпечує реактивність інтерфейсу при зміні даних. Маршрутизація реалізована за допомогою Blazor Router, що дозволяє динамічно перемикатися між сторінками без перезавантаження.
На рисунках Б.1 у додатку Б наведені UML діаграму прецедентів.
На рисунку Б.2 у додатку Б наведена діаграма розгортання.
На рисунку Б.3 у додатку Б наведена діаграмма компонентів. 
На рисунку Б.4 у додатку Б наведена діаграма станів.
4 ВИСНОВКИ З РОБОТИ
		Розробка клієнтської частини програмного рішення на базі технологій Blazor продемонструвала ефективність сучасного підходу до створення веб-інтерфейсів з використанням екосистеми .NET. Використання компонентного архітектурного підходу дозволило створити модульну, зручну для підтримки та розширення систему, де кожен елемент інтерфейсу має чітко визначену функціональність. Інтеграція з серверною частиною через REST API була реалізована з урахуванням сучасних стандартів безпеки, де механізм Cookie-аутентифікації забезпечив надійний захист даних користувачів без необхідності використання додаткових бібліотек. 
 
ДОДАТОК А
Посилання на відео та хронологічний опис
https://youtu.be/EqIK8MOha0o
00:00 Login 
00:25 Admin panel 
01:07 Devices panel 
04:08 Registration 
05:35 Managing created account
 
ДОДАТОК Б
Графічні матеріали
 
Рисунок Б.1 - UML діаграма прецедентів
 
Рисунок Б.2 – Діаграма розгортання
 
Рисунок Б.3 - UML діаграма компонентів
 
Рисунок Б.4 – Діаграма станів
 
ДОДАТОК В
Програмний код

В.1 Збереження сенсорних даних
GitHub репозиторій: https://github.com/NureKolesnykOleksandr/apz-pzpi-22-7-kolesnyk-oleksandr/blob/main/Lab3/pzpi-22-7-kolesnyk-oleksandr-lab3/ClientMM/ClientMM/Components/Pages/Devices.razor
1    private async Task AddSensorData()
2    {
3        try
4        {
5            var result = await DeviceService.AddSensorData(selectedDeviceSerialNumber,
6                new AddSensorDataDto{ActivityLevel = newSensorData.activityLevel, BloodOxygenLevel = newSensorData.bloodOxygenLevel, BodyTemperature = newSensorData.bodyTemperature, HeartRate = newSensorData.heartRate, SleepPhase = newSensorData.sleepPhase}
7            );
8            if (result.Succeeded)
9            {
10                showAddDataDialog = false;
11            }
12            else
13            {
14                errorMessage = result.Errors.FirstOrDefault()?.Description ?? "Failed to register device";
15           }
16        }
17        catch (Exception ex)
18        {
19            errorMessage = $"Error: {ex.Message}";
20        }
21    }
