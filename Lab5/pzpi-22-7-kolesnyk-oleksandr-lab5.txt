Міністерство освіти і науки України
Харківський національний університет радіоелектроніки





Кафедра «Програмної інженерії»




Дисципліна «Архітектура програмного забезпечення» 
Лабораторна робота №5





Виконав:
ст. гр. ПЗПІ-22-7
Колесник О.А	Прийняв:
 ст. викл.
Сокорчук І.П



Харків – 2025 
1 ІСТОРІЯ ЗМІН

№	Дата 	Версія	Опис змін	Автор
1	20.05.25	0.1	Було створено розділ «Завдання».	Колесник Олександр
2	20.05.25	0.1	Було створено розділ «Опис виконаної роботи».	Колесник Олександр
3	20.05.25	0.1	Було створено розділ «Висновки з роботи»	Колесник Олександр
4	21.05.25	0.2	Було створено розділ «Додаток А»	Колесник Олександр
5	21.05.25	0.2	Було створено розділ «Додаток Б»	Колесник Олександр

2 ЗАВДАННЯ
Мета завдання – розгорнути повноцінний стек програмної системи та продемонструвати її роботу в усіх компонентах: серверній частині, веб-інтерфейсі, мобільному додатку та IoT-підсистемі. Продемонстувати, що всі частини системи працюють узгоджено, забезпечуючи своєчасний збір, зберігання та моніторинг медичних біологічних матеріалів.
3 ОПИС ВИКОНАНОЇ РОБОТИ
Серверна частина програмної системи MedMon реалізована на мові програмування C# з використанням сучасного фреймворку ASP.NET Core. Для зберігання даних обрано вбудовану базу даних SQLite, що забезпечує простоту розгортання та кросплатформенність рішення. Доступ до даних організовано через Entity Framework Core - потужний ORM-інструмент, який дозволяє працювати з базою даних у об'єктно-орієнтованому стилі.
Архітектура серверної частини побудована на принципах REST, що забезпечує чітку структуру API та легкість інтеграції з клієнтськими додатками. Система використовує JWT-токени для аутентифікації користувачів, що підвищує рівень безпеки. Автоматичні міграції бази даних спрощують процес оновлення структури даних при розвитку системи.
Для розгортання системи використовується технологія контейнеризації Docker, що дозволяє запускати додаток на будь-якій платформі, яка підтримує контейнери. Docker-образ містить усі необхідні залежності та налаштування, що значно спрощує процес впровадження. Система може бути розгорнута як на власному сервері, так і в хмарному середовищі.
Резервне копіювання даних реалізовано через простий механізм копіювання файлу бази даних SQLite. Для підвищення надійності можна налаштувати автоматичне створення резервних копій з заданою періодичністю.
Серверна частина забезпечує надійну роботу всіх модулів системи: автентифікації користувачів, керування медичними пристроями, збору даних з сенсорів, формування рекомендацій та генерації сповіщень. Гнучка архітектура дозволяє легко розширювати функціонал системи та інтегрувати її з іншими медичними сервісами.

4 ВИСНОВКИ З РОБОТИ
У ході роботи було розгорнуто повноцінний стек системи MedMon, що включає серверну частину, веб-інтерфейс, мобільний додаток та IoT-підсистему. Серверна частина на ASP.NET Core з SQLite та Entity Framework Core показала високу продуктивність і гнучкість. Використання Docker спростило розгортання та забезпечило кросплатформенність. Система ефективно інтегрує всі ключові модулі: автентифікацію, керування пристроями, збір даних та генерацію сповіщень. Реалізація патерну Proxy довела свою ефективність у контролі доступу та оптимізації запитів. Отримані результати підтверджують, що система відповідає сучасним вимогам і має потенціал для подальшого розвитку.
 
ДОДАТОК А
Посилання на відео та хронологічний опис
https://youtu.be/cMwQcinhT_Y
00:00 Початок 
00:01 Демонстрація Dockerfile 
00:44 Демонстрація роботи додатку запущеного через Docker image
 
ДОДАТОК Б
Програмний код

В.1 Dockerfile
GitHub репозиторій: https://github.com/NureKolesnykOleksandr/apz-pzpi-22-7-kolesnyk-oleksandr/blob/main/Lab5/pzpi-22-7-kolesnyk-oleksandr-lab5/ServerMM/ServerMM/Dockerfile.
1 FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
2 USER app
3 WORKDIR /app
4 EXPOSE 8080
5 EXPOSE 8081
6 FROM mcr.microsoft.com/dotnet/sdk:8.0 AS build
7 ARG BUILD_CONFIGURATION=Release
8 WORKDIR /src
9 COPY ["ServerMM/ServerMM.csproj", "ServerMM/"]
10 RUN dotnet restore "./ServerMM/ServerMM.csproj"
11 COPY . .
12 WORKDIR "/src/ServerMM"
13 RUN dotnet build "./ServerMM.csproj" -c $BUILD_CONFIGURATION -o /app/build
14 FROM build AS publish
15 ARG BUILD_CONFIGURATION=Release
16 RUN dotnet publish "./ServerMM.csproj" -c $BUILD_CONFIGURATION -o /app/publish /p:UseAppHost=false
17 FROM base AS final
18 WORKDIR /app
19 COPY --from=publish /app/publish .
20 ENTRYPOINT ["dotnet", "ServerMM.dll"]
