Міністерство освіти і науки України
Харківський національний університет радіоелектроніки
 
 
  
Кафедра ПІ
 

 
Дисципліна «Архітектура програмного забезпечення»
Практична робота №2
«Архітектура відомих програмних систем»
 
 
  
 
Виконав:
ст. гр. ПЗПІ-22-7
Колесник О.А.	 	Прийняв:
ст. викл. кафедри ПІ
Сокорчук І.П
 

Харків – 2025
1 ІСТОРІЯ ЗМІН

№	Дата 	Версія	Опис змін	Автор
1	12.04.25	0.1	Було створено розділ «Завдання».	Колесник Олександр
2	12.04.25	0.1	Було створено розділ «Опис виконаної роботи».	Колесник Олександр
3	12.05.25	0.1	Було створено розділ «Висновки з роботи»	Колесник Олександр
4	13.04.25	0.1	Було створено розділ «Додаток А»	Колесник Олександр
5	17.04.25	0.1	Було створено розділ «Додаток Б»	Колесник Олександр

2 ЗАВДАННЯ
У рамках практичної роботи №2 з дисципліни «Архітектура програмного забезпечення» буде досліджено архітектуру GitHub - провідної платформи для спільної розробки програмного забезпечення. Розглядатиметься історія розвитку системи, її технологічний стек, включаючи використання Ruby on Rails та React, та особливості масштабування. Буде проаналізовано загальну схему архітектури, організацію баз даних (MySQL, Redis), систему кешування, механізми обробки запитів, а також використання CDN для ефективної доставки контенту. Особливу увагу буде приділено аналізу того, як платформа забезпечує стабільну роботу при великій кількості одночасних користувачів та обробляє мільярди запитів щодня. Також буде розглянуто інтеграцію з сучасними DevOps-інструментами, такими як GitHub Actions, та заходи безпеки, включаючи захист від DDoS-атак.
3 ОПИС ВИКОНАНОЇ РОБОТИ
GitHub був запущений у 2008 році як платформа для спільної розробки на базі Git. Спочатку система використовувала монолітну архітектуру на Ruby on Rails, але з часом перейшла до мікросервісного підходу для підвищення масштабованості. Сьогодні GitHub обробляє мільярди запитів щодня завдяки розподіленій архітектурі, що включає API Gateway, кешування через Redis та оптимізовані бази даних (MySQL, Cassandra). Для швидкої доставки статичного контенту використовується CDN (Azure), а обробка Git-операцій оптимізована через спеціальні сервіси. Система забезпечує високу доступність завдяки Kubernetes-оркестрації та реплікації даних. Безпека реалізована через HTTPS, OAuth 2.0 та захист від DDoS. GitHub Actions дозволяє автоматизувати CI/CD, що робить платформу ключовим інструментом для сучасних DevOps-процесів.
4 ВИСНОВКИ З РОБОТИ
Дослідження архітектури GitHub показало, як платформа еволюціонувала від простого Git-хостингу до потужної розподіленої системи. Використання мікросервісів, кешування, CDN та сучасних DevOps-інструментів дозволяє GitHub ефективно масштабуватися та обслуговувати мільйони розробників. Оптимізація швидкодії, надійності та безпеки робить його однією з найпопулярніших платформ для спільної розробки ПЗ. 
ДОДАТОК А
Відеозапис доповіді на YouTube: https://youtu.be/W-NAMdvIGIo
Хронологічний опис доповіді:
00:01 Початок 
00:10 Вступ 
00:32 Визначення патерну Prototype 
00:52 Структура патерну 
01:18 Переваги патерну Prototype 
01:45 Недоліки патерну Prototype 
02:10 Застосування патерну 
02:31 Прикладу коду(Інтерфейс) 
02:49 Приклад коду(ConcretePrototype) 
03:12 Приклад коду(Глибоке копіювання) 
03:29 Висновки 
04:14 Використані джерела
 
ДОДАТОК Б
 
Рисунок Б.1 – Титульний слайд презентації
 
Рисунок Б.2 – Що таке GitHub?
 
Рисунок Б.3 – Історія GitHub
 
Рисунок Б.4 – Основні можливості GitHub
 
Рисунок Б.5 – Архітектура GitHub
 
Рисунок Б.6 – Робота з репозиторіями
 
Рисунок Б.7 – Спільна розробка
 
Рисунок Б.8 – GitHub Actions
 
Рисунок Б.9 – GitHub дял навчання
 
Рисунок Б.10 – Безпека на GitHub
 
Рисунок Б.11 – Альтернативи GitHub
 
Рисунок Б.12 – Висновки
 
Рисунок Б.13 – Джерела інформації 
